# -*- coding: utf-8 -*-
"""image_recognition_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14ZxyhBctMpjwAn3tA-5HBFlUaDAYUu4K
"""

# prompt: Problem Statements for Handwritten Digit Recognition Applications
# Problem 1: Intelligent Form Digitization System
# Background
# Many organizations still deal with handwritten forms that need to be digitized. Current OCR systems often struggle with varying handwriting styles and form layouts.
# Problem Statement
# Develop an intelligent form digitization system that can:
# Accept scanned forms containing multiple handwritten digits in various fields (e.g., ID numbers, phone numbers, postal codes)
# Handle different form layouts and field positions
# Process digits written in different sizes and styles
# Provide confidence scores for each recognized digit
# Flag uncertain recognitions for human review
# User Requirements
# Support for uploading scanned forms in common formats (PDF, JPEG, PNG)
# Interface for defining form templates and digit field locations
# Real-time processing feedback
# Export results in structured formats (CSV, JSON)
# Quality assurance interface for reviewing uncertain predictions
# Technical Challenges
# Form alignment and field extraction
# Handling different scanning qualities and resolutions
# Dealing with touching or overlapping digits
# Managing various background colors and patterns
# Implementing efficient quality control workflows
# take input image from me and then take input data and then find inside
# write python code take input image via choose option then user input then check inside image input data matches present or not then tell user in end

import cv2
import numpy as np
from google.colab import files
import pytesseract

# Install necessary libraries (if not already installed)
!apt-get install tesseract-ocr
!pip install pytesseract

# Function to perform OCR on the image and extract digits
def extract_digits_from_image(image_path):
    try:
        img = cv2.imread(image_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Ensure correct color format for pytesseract
        text = pytesseract.image_to_string(img, config='--psm 6')  # Use page segmentation mode 6 for single-line text
        digits = ''.join(filter(str.isdigit, text))  # Extract only digits from the text
        return digits
    except Exception as e:
        print(f"Error processing image: {e}")
        return None

# Main function
def main():
    uploaded = files.upload()

    for fn in uploaded.keys():
        image_path = fn  # Get the image file path from the uploaded file
        extracted_digits = extract_digits_from_image(image_path)

        if extracted_digits:
            print("Extracted digits from the image:", extracted_digits)

            user_input = input("Enter the digits you want to check: ")

            if user_input in extracted_digits:
                print("The input digits are present in the image.")
            else:
                print("The input digits are not present in the image.")
        else:
            print("Failed to extract digits from the image.")

if __name__ == "__main__":
    main()